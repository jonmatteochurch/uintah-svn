# -*- python -*-
# ex: set syntax=python:

from buildbot                       import scheduler
from buildbot.buildslave            import BuildSlave
from buildbot.changes.svnpoller     import SVNPoller, split_file_branches
from buildbot.changes               import filter
from buildbot.process               import factory
from buildbot.process.properties    import Property, Interpolate
from buildbot.schedulers.forcesched import ForceScheduler, ChoiceStringParameter
from buildbot.schedulers.basic      import SingleBranchScheduler
from buildbot.status                import html, mail, results
from buildbot.status.results        import SUCCESS, WARNINGS, SKIPPED, FAILURE
from buildbot.steps                 import source, shell
from buildbot.steps.slave           import MakeDirectory, CopyDirectory
from buildbot.util                  import makeList
import os, shutil, glob
from datetime                       import timedelta
#______________________________________________________________________

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

#______________________________________________________________________
# DATA LIFETIME
#
# (http://docs.buildbot.net/0.8.12/manual/cfg-global.html#data-lifetime)

c['changeHorizon'] = 200
c['buildHorizon']  = 100
c['logHorizon']    = 100

#______________________________________________________________________
# BUILDSLAVES
#
# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a tuple of bot-name and bot-password. These correspond to values given to
# the buildslave's mktap invocation.

c['slaves'] = [ BuildSlave("stretch", "password",max_builds=6) ]


# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = 9989

#______________________________________________________________________
# CHANGESOURCES
#
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

trunk_svn_url      ='https://gforge.sci.utah.edu/svn/uintah/'
kokkos_dev_svn_url ='https://gforge.sci.utah.edu/svn/uintah/'
doc_svn_url        ='https://gforge.sci.utah.edu/svn/uintah/trunk/doc'

trunk = SVNPoller(
                  svnurl       = trunk_svn_url,
                  project      = "trunkChanges",
                  pollinterval = 1*60,              # seconds -- every 1 minute
                  split_file   = split_file_branches)
                  

kokkos_dev = SVNPoller(
                  svnurl       = kokkos_dev_svn_url,
                  project      = "kokkosChanges",
                  pollinterval = 1*60,              # seconds -- every 1 minute
                  split_file   = split_file_branches)


doc   = SVNPoller(
                  svnurl       = doc_svn_url,
                  project      = "docChanges",                                
                  pollinterval = 10*60,             # seconds -- every 10 minutes         
                  split_file   = split_file_branches                          
                 )                                                            

c['change_source'] = [ trunk, doc ]


#______________________________________________________________________
#  Utilities:
#
#  Logic for skipping the build bot
#  skip buildbot tests if the string "skipRT" or "skip-rt" or skip_rt" is in the comments

def runBuildBot(change):
    LC_comments = change.comments.lower()  # convert comments to lower case

    if "skiprt" in LC_comments or "skip_rt" in LC_comments  or "skip_rt" in LC_comments:
        print "  runBuildBot:  Skipping buildbot"
        return False
    else:
        return True

#______________________________________________________________________
# SCHEDULERS
#
# Configure the Schedulers, which decide how to react to incoming changes.
#
#  Nomenclature _<name>  = scheduler

#__________________________________
#    TRUNK
sched_trunk_compile_dbg       = SingleBranchScheduler(
                                  name            = "compile-dbg",
                                  treeStableTimer = 1*60, # wait 1 minutes
                                  change_filter   = filter.ChangeFilter(project = "trunkChanges", branch = None),
                                  builderNames    = ["Trunk:dbg-compile"] )


sched_trunk_compile_dbg_static = scheduler.Dependent(
                                  name            = "compile-dbg-static",
                                  upstream        = sched_trunk_compile_dbg,
                                  builderNames    = ["Trunk:dbg-compile-static"] )

sched_trunk_full_opt_gpu       = scheduler.Dependent(
                                  name            = "full-opt-gpu",
                                  upstream        = sched_trunk_compile_dbg_static,
                                  builderNames    = ["Trunk:opt-full-gpu"] )


sched_trunk_full_opt_cpu       = scheduler.Dependent(
                                  name            = "full_opt_cpu",
                                  upstream        = sched_trunk_compile_dbg_static,
                                  builderNames    = ["Trunk:opt-full"] )


#__________________________________
#     KOKKOS

#sched_kokkos_compile_dbg       = SingleBranchScheduler(
#                                  name            = "kokkos-compile-dbg",
#                                  treeStableTimer = 1*60, # wait 1 minutes
#                                  change_filter   = filter.ChangeFilter(project = "kokkosChanges", branch = None),
#                                  builderNames    = ["Kokkos:dbg-compile"] )


#__________________________________
#     DOCUMENTATION


sched_doc                = SingleBranchScheduler(
                                  name            = "doc-build",
                                  change_filter   = filter.ChangeFilter(project = "docChanges", branch = None),
                                  treeStableTimer = 1*60,
                                  builderNames    = ["Documentation-Builder"] )

#__________________________________
#     WEB PAGE

sched_force   = ForceScheduler(
                      name="force",
                      builderNames=["Documentation-Builder",
                                    "Trunk:dbg-compile",
                                    "Trunk:dbg-full-try",
                                    "Trunk:dbg-compile-static",
                                    "Trunk:opt-full-gpu",
                                    "Trunk:opt-full-gpu-try",
                                    "Trunk:opt-full",
                                    "Trunk:opt-full-try",
                                 #   "kokkos-compile-dbg"
                                   ] )


#__________________________________
#     TRY SERVER

sched_try     = scheduler.Try_Userpass(
                      name="try",
                      builderNames=["Trunk:opt-full-try",
                                    "Trunk:dbg-full-try",
                                    "Trunk:opt-full-gpu-try"],
                      port=8031,
                      userpass=[("buildbot_try","try_buildbot"), ("bob", "pw2")] )


#__________________________________
#     BUILDBOT TESTING

Todd_RT_tests     = ["ARCHES", "Examples","ICE", "IMPM", "Models", "MPMICE", "MPM", "UCF", "Wasatch"]
sched_testBuildBot       = ForceScheduler(   name            = "buildbot_testing",
                                             branch          = None,
                                             builderNames    = ["buildbot_testing"],

                                             properties=[ ChoiceStringParameter(name      = "Tests",
                                                                                label     = "Select Components to test",
                                                                                default   = Todd_RT_tests,
                                                                                multiple  = True,
                                                                                strict    = True,
                                                                                choices   = Todd_RT_tests)
                                                        ] )


c['schedulers'] = [ sched_trunk_compile_dbg,
                    sched_trunk_compile_dbg_static,
                    sched_trunk_full_opt_gpu,
                    sched_trunk_full_opt_cpu,
                  #  sched_kokkos_compile_dbg,
                    sched_doc,
                    sched_force,
                    sched_try,
                    sched_testBuildBot
                  ]

#______________________________________________________________________
####### BUILDERS

# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required):             the name used to describe this bilder
#  slavename (required):        which slave to use, must appear in c['bots']
#  builddir (required):         which subdirectory to run the builder in
#  factory (required):           a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/steps/source.py for
# CVS, SVN, and others.

compiler_env = {'CC'  : 'mpicc',
                'CXX' : 'mpic++',
                'F77' : 'mpif77',
                'SCI_MAKE_BE_QUIET' : 'true',
                'LANG' : ''
                }

gpu_compiler_env = {'CC'  : 'mpicc',
                    'CXX' : 'mpic++',
                    'F77' : 'mpif77',
#                   'CXXFLAGS' : '-DFIXED_RANDOM_NUM -Wno-deprecated',
                    'SCI_MAKE_BE_QUIET' : 'true',
                    'LANG' : ''
                    }

RT_webpage_env = {'OUTPUT_HTML': 'yes',
                  'RT_URL'     :  'http://uintah-build.chpc.utah.edu/~buildbot'
                 }

#__________________________________
#  Uintah machine dependent configure line definitions
#
notUsed = {}

mpi_config   = ["--with-mpi=built-in"]
hypre_config = ["--with-hypre=/usr/local/hypre-2.8.0b"]
petsc_config = ["--with-petsc=/usr/local/petsc-3.8.4"]
boost_config = ["--with-boost=/usr/local/boost-1.65.1"]

components_config     = ["--enable-ray-scatter",
                        "--enable-all-components"
                        ]

components_gpu_config = ["--enable-ray-scatter",
                         "--enable-arches" ,
                         "--enable-examples"
                        ]

wasatch_config    = ["--enable-wasatch_3p" ]

dbg_config        = ["../src/configure",
                     "--enable-debug",
                     "--enable-sci-malloc"
                    ]

dbg_static_config = ["../src/configure",
                     "--enable-debug",
                     "--enable-static",
                     "--enable-sci-malloc",
                     "CXXFLAGS=-pthread"
                     ]

opt_gpu_config    = ["../src/configure",
                      "--enable-optimize=-O3 -mfpmath=sse",
                      "--enable-64bit",
                      "--enable-assertion-level=0",
                      "--enable-gencode=52",
                      "--with-cuda=/usr/local/cuda"
                    ]

opt_config = ["../src/configure",
              "--enable-optimize=-O3 -mfpmath=sse",
              "--enable-64bit",
              "--enable-assertion-level=0",
              "--disable-sci-malloc"
             ]

dbg_configCmd         = dbg_config + wasatch_config + components_config + mpi_config + hypre_config + petsc_config + boost_config

dbg_static_configCmd  = dbg_static_config + wasatch_config + components_config + mpi_config + hypre_config + petsc_config + boost_config

opt_gpu_configCmd     = opt_gpu_config + components_gpu_config + mpi_config + hypre_config + petsc_config + boost_config

opt_configCmd         = opt_config + wasatch_config + components_config + mpi_config + hypre_config + petsc_config + boost_config

opt_nightly_configCmd = opt_configCmd

dbg_nightly_configCmd = dbg_configCmd


RT_tests     = ["ARCHES", "Examples","ICE", "IMPM", "Models", "MPMICE", "MPM", "UCF", "Wasatch"]
#GPU_RT_tests = ["Examples", "ICE", "ARCHES", "Wasatch"]
GPU_RT_tests = ["Examples", "ARCHES"]

#__________________________________

def AddTestStepRT(fac, test_case, test_set, build_type, RT_webpage_env):
        def TestFailed(step):
                return step.build.results == FAILURE

        def TestPassed(step):
                return step.build.results == SUCCESS

        RT_env = {'TEST_COMPONENTS': test_case ,
                  'WHICH_TESTS'    : test_set,
                  'GOLD_STANDARDS' : '/home/rt/Linux/TestData/' + build_type,
                  'RT_CHECKPOINTS' : '/home/rt/CheckPoints/'
                 }
        RT_env.update(RT_webpage_env)

        fac.addStep( shell.ShellCommand,
                     description    = ["Running " + test_case.upper() + " " + build_type + " tests"],
                     command        = ["make", "runLocalRT"],
                     env            = RT_env,
                     workdir        = 'build/' + build_type,
                     warnOnWarnings = True,
                     timeout        = 60*60,  # timeout after 1 hour
                     name           = test_case + "_test"
                   )

#__________________________________

def AddTestStepGPURT(fac, test_case, test_set, build_type):
        def TestFailed(step):
                return step.build.results == FAILURE

        def TestPassed(step):
                return step.build.results == SUCCESS

        RT_env = {'TEST_COMPONENTS' : test_case ,
                  'WHICH_TESTS'     : test_set,
                  'GOLD_STANDARDS'  : '/home/gpu_rt/Linux/TestData/' + build_type,
                  'RT_CHECKPOINTS'  : '/home/gpu_rt/CheckPoints/',
                  'CUDA_VISIBLE_DEVICES' : '0',
                  'SCI_DEBUG'       : 'SingleDevice:+'
                 }

        fac.addStep(shell.ShellCommand,
                    description   =["Running " + test_case.upper() + " " + build_type + " tests"],
                    command       =["make", "runLocalRT"],
                    env           =RT_env,
                    workdir       = 'build/' + build_type,
                    warnOnWarnings=True,
                    timeout       =60*60,  # timeout after 1 hour
                    name          =test_case + "_test"
                   )

#______________________________________________________________________
#
#  Common steps for the factories

def svnUpdate( factory, svn_url ):

      factory.addStep( source.SVN,
                       baseURL        = svn_url,
                       defaultBranch  = "trunk/src",
                       workdir        = 'build/src',
                       mode           = "update",
                       retry          = (10,2) )
                     
#__________________________________
#   configure step                     
def configure( factory, configCmd, compilerEnv, wrkDir ):

      factory.addStep( shell.Configure,
                       command = configCmd,
                       env     = compilerEnv,
                       workdir = wrkDir
                     )

#__________________________________
#   compile step                     
def compile( factory, numProcs, compilerEnv, wrkDir ):

      factory.addStep( shell.Compile,
                       command = ["python", "../src/scripts/buildbot/make.py", " 16"],
                       env     = compilerEnv,
                       workdir = wrkDir
                     )

#__________________________________
# determine if a step has failed  return true if one has.
def hasStepFailed(step):
    allSteps = step.build.getStatus().getSteps()

    for s in allSteps:
        result = s.getResults()[0]
        if result == FAILURE:
            return True
    return False


#__________________________________
def skipped(result, s):
    return (result == results.SKIPPED)
    


#__________________________________
# run make cleanrelly
def makeclean( factory, wrkDir ): 
  factory.addStep( shell.ShellCommand,
                   description   = ["make clean"],
                   name          = "make clean",
                   command       = ["make", "reallyclean"],
                   workdir       = wrkDir,
                   warnOnWarnings= True,
                   warnOnFailure = True
                )    

#__________________________________
# copy build directory to appropriate /data  directory
def copyBuildDir( factory ):

  factory.addStep( shell.ShellCommand,
                   description   = ["change permissions"],
                   name          = "Change permissions",
                   command       = ["/bin/sh", "-c", "chgrp -R users . ; chmod -R g+rwX ."],
                   doStepIf      = hasStepFailed,
                   hideStepIf    = skipped ,
                   workdir       = 'build/',
                   warnOnWarnings= True,
                   warnOnFailure = True
                )

  factory.addStep( MakeDirectory( dir = Interpolate( '/data/buildbot/%(prop:buildername)s/%(prop:buildnumber)s/' ),
                                  name       ="mkdir",
                                  doStepIf   = hasStepFailed,
                                  hideStepIf = skipped
                                )
                 )

  factory.addStep( CopyDirectory( src = "build", 
                                  dest       = Interpolate( '/data/buildbot/%(prop:buildername)s/%(prop:buildnumber)s/' ),
                                  name       = "cp build ",
                                  doStepIf   = hasStepFailed,
                                  hideStepIf = skipped 
                                )
                 )

#______________________________________________________________________
#
#   Uintah documentation factory
f_doc = factory.BuildFactory()

f_doc.addStep(source.SVN,
              baseURL       = doc_svn_url,
              defaultBranch = "",
              workdir       = 'build/doc',
              mode          = "update",
              retry         = (10,2))

f_doc.addStep(shell.ShellCommand,
              description   = ["Building documentation"],
              command       = ["./runLatex"],
              workdir       = 'build/doc',
              warnOnWarnings= False,
              warnOnFailure = False,
              name          = "build documentation")

#______________________________________________________________________
#
#   Debug compile factory
f_compile_dbg = factory.BuildFactory()

svnUpdate ( f_compile_dbg, trunk_svn_url )

configure( f_compile_dbg, dbg_configCmd, compiler_env, 'build/dbg' )

compile( f_compile_dbg, 16, compiler_env, 'build/dbg' )

makeclean( f_compile_dbg, 'build/dbg' )

copyBuildDir( f_compile_dbg )

#______________________________________________________________________
#
#   Debug compile static factory
f_compile_dbg_static = factory.BuildFactory()

svnUpdate ( f_compile_dbg_static, trunk_svn_url )
                            
configure( f_compile_dbg_static, dbg_static_configCmd, compiler_env, 'build/dbg_static' )

compile( f_compile_dbg_static, 16, compiler_env, 'build/dbg_static' )

makeclean( f_compile_dbg_static, 'build/dbg_static' )

copyBuildDir( f_compile_dbg_static )

#______________________________________________________________________
#
#   Debug full factory
f_full_dbg = factory.BuildFactory()

svnUpdate ( f_full_dbg, trunk_svn_url )

configure( f_full_dbg, dbg_configCmd, compiler_env, 'build/dbg' )

compile( f_full_dbg, 16, compiler_env, 'build/dbg' )

for test in RT_tests:
        AddTestStepRT(f_full_dbg,test,"BUILDBOTTESTS","dbg", notUsed)

makeclean( f_full_dbg, 'build/dbg' )

copyBuildDir( f_full_dbg )

#______________________________________________________________________
#
#   Optimize full  factory
f_full_opt = factory.BuildFactory()

svnUpdate( f_full_opt, trunk_svn_url )

configure( f_full_opt, opt_configCmd, compiler_env, 'build/opt' )

compile( f_full_opt, 16, compiler_env, 'build/opt' )


for test in RT_tests:
        AddTestStepRT(f_full_opt,test,"BUILDBOTTESTS","opt", RT_webpage_env)

makeclean( f_full_opt, 'build/opt' )

copyBuildDir( f_full_opt )

#______________________________________________________________________
#
#   Opt full GPU  factory
f_full_opt_gpu = factory.BuildFactory()

svnUpdate( f_full_opt_gpu, trunk_svn_url )

f_full_opt_gpu.addStep(shell.ShellCommand,
                       description    = ["Modifying Source"],
                       command        = ["./R_Tester/modifySrc"],
                       workdir        = 'build/src',
                       warnOnWarnings = False,
                       warnOnFailure  = False,
                       name           ="modify source"
                      )

configure( f_full_opt_gpu, opt_gpu_configCmd, gpu_compiler_env, 'build/opt' )

compile( f_full_opt_gpu, 16, gpu_compiler_env, 'build/opt' )

for test in GPU_RT_tests:
        AddTestStepGPURT(f_full_opt_gpu,test,"BUILDBOTTESTS","opt")

makeclean( f_full_opt_gpu, 'build/opt' )

copyBuildDir( f_full_opt_gpu )

#______________________________________________________________________
#
#   nightly full factory
f_nightly = factory.BuildFactory()

svnUpdate( f_nightly, trunk_svn_url )
                 

#    Opt
configure( f_nightly, dbg_nightly_configCmd, compiler_env, 'build/dbg' )

compile( f_nightly, 16, compiler_env, 'build/dbg' )


for test in RT_tests:
        AddTestStepRT(f_nightly,test,"NIGHTLYTESTS","dbg", notUsed)


#     dbg
configure( f_nightly, opt_nightly_configCmd, compiler_env, 'build/opt' )

compile( f_nightly, 16, compiler_env, 'build/opt' )

for test in RT_tests:
        AddTestStepRT(f_nightly,test,"NIGHTLYTESTS","opt", notUsed)

makeclean( f_nightly, 'build/opt' )

copyBuildDir( f_nightly )


#______________________________________________________________________
#
#   buildbot_testing  factory
f_bb_test = factory.BuildFactory()

recompile = False

if(recompile):

  svnUpdate( f_bb_test, trunk_svn_url )

  configCmd = opt_config + mpi_config +  ["--enable-examples", "--enable-ice", "--enable-mpm"]
  
  configure( f_bb_test, configCmd, compiler_env, 'build/opt' )

  compile( f_bb_test, 16, compiler_env, 'build/opt' )
  
f_bb_test.addStep(shell.ShellCommand,
                    description    = ["Property  test"],
                    command        = ["echo", Property('Tests') ],
                   # name          = test_case + "_test"
                   )


myRT_tests  = makeList( ('ICE' ) )        # Crux:  How do you get a python list from a property??

#myRT_tests = Todd_RT_tests
for test in myRT_tests:
        AddTestStepRT(f_bb_test,test,"DEBUGGING","opt", notUsed)

makeclean( f_bb_test, 'build/opt' )

#copyBuildDir( f_bb_test )

#______________________________________________________________________
#### BUILDERS #####
#
#  Nomenclature:  b_<trunk/Kokkos>_<compile/full>_<opt/dbg>_<var>   for a builder
#
# <trunk/kokkos>    trunk or kokkos_dev branch
# <compile/full>    compilation test or compile and runRT tests
# <opt/dbg>         optimized or debug configuration
#______________________________________________________________________


b_doc= {'name'       : "Documentation-Builder",
        'slavenames' :[ "stretch"],
        'builddir'   : "uintah_doc",
        'factory'    : f_doc,
       }

b_trunk_compile_dbg= {
       'name'        : "Trunk:dbg-compile",
       'slavename'   : "stretch",
       'builddir'    : "trunk/dbg-compile",
       'factory'     : f_compile_dbg,
      }

b_trunk_compile_dbg_static= {
       'name'      : "Trunk:dbg-compile-static",
       'slavename' : "stretch",
       'builddir'  : "trunk/dbg-compile-static",
       'factory'   : f_compile_dbg_static,
      }

b_trunk_full_dbg_try= {
       'name'     : "Trunk:dbg-full-try",
       'slavename': "stretch",
       'builddir' : "trunk/dbg-full-try",
       'factory'  : f_full_dbg,
      }

b_trunk_full_opt= {
       'name'      : "Trunk:opt-full",
       'slavename' : "stretch",
       'builddir'  : "trunk/opt-full",
       'factory'   : f_full_opt,
      }

b_trunk_full_opt_try= {
       'name'      : "Trunk:opt-full-try",
       'slavename' : "stretch",
       'builddir'  : "trunk/opt-full-try",
       'factory'   : f_full_opt,
      }

b_trunk_full_opt_gpu= { 
       'name'      : "Trunk:opt-full-gpu",
       'slavename' : "stretch",
       'builddir'  : "trunk/opt-full-gpu",
       'factory'   : f_full_opt_gpu,
      }

b_trunk_full_opt_gpu_try= { 
       'name'      : "Trunk:opt-full-gpu-try",
       'slavename' : "stretch",
       'builddir'  : "trunk/opt-full-gpu-try",
       'factory'   : f_full_opt_gpu,
      }

b_trunk_full_nightly= { 
       'name'      : "Trunk:opt-full-nightly",
       'slavename' : "stretch",
       'builddir'  : "trunk:opt-full-nightly",
       'factory'   : f_nightly,
       }

b_buildbot_testing= {
       'name'      : "buildbot_testing",
       'slavename' : "stretch",
       'builddir'  : "buildbot_testing",
       'factory'   : f_bb_test,
       }


c['builders'] = [b_doc,
                 b_trunk_compile_dbg,
                 b_trunk_compile_dbg_static,
                 b_trunk_full_opt_gpu,
                 b_trunk_full_opt,
                 b_trunk_full_opt_try,
                 b_trunk_full_opt_gpu_try,
                 b_trunk_full_dbg_try,
                 b_buildbot_testing
             #    b_full_nightly      This is redundant with the nightly RT cron job
                 ]

#______________________________________________________________________
# STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []


c['status'].append(html.WebStatus(http_port="8010",allowForce=True))


c['status'].append(mail.MailNotifier(fromaddr        ="uintah-developer@gforge.sci.utah.edu",
                                     extraRecipients =["uintah-developer@gforge.sci.utah.edu"],
                                     builders        =[
                                                       #"Documentation-Builder",
                                                       "Trunk:dbg-compile",
                                                       "Trunk:opt-full-gpu",
                                                       "Trunk:dbg-compile-static",
                                                       "Trunk:opt-full-cpu"],
                                     sendToInterestedUsers=True,
                                     lookup="sci.utah.edu",
                                     mode="failing"))


c['status'].append(mail.MailNotifier(fromaddr = "uintah-developer@gforge.sci.utah.edu",
                                     builders = ["Trunk:opt-full-try",
                                                 "Trunk:dbg-full-try",
                                                 "Trunk:opt-gpu-try"],
                                     sendToInterestedUsers=True,
                                     lookup="sci.utah.edu",
                                     mode="failing"))

c['status'].append(mail.MailNotifier(fromaddr        ="uintah-developer@gforge.sci.utah.edu",
                                     extraRecipients =["uintah-developer@gforge.sci.utah.edu"],
                                     builders        =["opt-full-nightly"],
                                     sendToInterestedUsers=True,
                                     lookup="sci.utah.edu",
                                     mode="all"))

#______________________________________________________________________

####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")

#______________________________________________________________________

####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Uintah"
c['projectURL'] = "http://www.uintah.utah.edu/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://uintah-build.chpc.utah.edu:8010/"
